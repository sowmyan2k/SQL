---Assignment SQL Queries
CREATE DATABASE Intel_Assgn_107
USE Intel_Assgn_107
CREATE TABLE studies (PNAME varchar(20), INSTITUTE varchar(20), COURSE varchar(20), COURSE_FEE int )
SELECT * FROM studies

INSERT INTO studies VALUES
('ANAND','SABHARI','PGDCA',4500 ),
('ALTAF','COIT','DCA',7200 ),
('JULIANA','BDPS','MCA',22000 ),
('KAMALA','PRAGATHI','DCA',5000 ),
('MARY','SABHARI','PGDCA ',4500 ),
('NELSON','PRAGATHI','DAP',6200 ),
('PATRICK','PRAGATHI','DCAP',5200 ),
('QADIR','APPLE','HDCA',14000 ),
('RAMESH','SABHARI','PGDCA',4500 ),
('REBECCA','BRILLIANT','DCAP',11000 ),
('REMITHA','BDPS','DCS',6000),
('REVATHI','SABHARI','DAP',5000 ),
('VIJAYA','BDPS','DCA',48000);

CREATE TABLE software (PNAME varchar(20), TITLE varchar(20), DEVELOPIN varchar(20), SCOST decimal(10,2),  DCOST int, SOLD int)

SELECT * FROM software

INSERT INTO software VALUES
('MARY','README','CPP',300, 1200, 84), 
('ANAND','PARACHUTES','BASIC',399.95, 6000, 43 ),
('ANAND','VIDEO TITLING','PASCAL',7500, 16000, 9 ),
('JULIANA','INVENTORY','COBOL',3000, 3500, 0 ),
('KAMALA','PAYROLL PKG.','DBASE',9000, 20000, 7),
('MARY','FINANCIAL ACCT.','ORACLE',18000, 85000, 4), 
('MARY','CODE GENERATOR','C',4500, 20000, 23),
('PATTRICK','README','CPP',300, 1200, 84),
('QADIR','BOMBS AWAY','ASSEMBLY',750, 3000, 11 ),
('QADIR','VACCINES','C',1900, 3100, 21 ),
('RAMESH','HOTEL MGMT.','DBASE',13000, 35000, 4),
('RAMESH','DEAD LEE','PASCAL',599.95, 4500, 73 ),
('REMITHA','PC UTILITIES','C',725, 5000, 51 ),
('REMITHA','TSR HELP PKG.','ASSEMBLY',2500, 6000, 7 ),
('REVATHI','HOSPITAL MGMT.','PASCAL',1100, 75000, 2 ),
('VIJAYA','TSR EDITOR','C',900, 700, 6);

CREATE TABLE programmer (PNAME varchar(20), DOB date, DOJ date, GENDER varchar(2), PROF1 varchar(20), PROF2 varchar(20), SALARY int)

SELECT * FROM programmer

INSERT INTO programmer VALUES
('ANAND','12-Apr-66','21-Apr-92','M','PASCAL','BASIC',3200 ),
('ALTAF','02-Jul-64','13-Nov-90','M','CLIPPER','COBOL',2800 ),
('JULIANA','31-Jan-60','21-Apr-90','F','COBOL','DBASE',3000 ),
('KAMALA','30-Oct-68','02-Jan-92','F','C','DBASE',2900 ),
('MARY','24-Jun-70','01-Feb-91','F','CPP','ORACLE',4500 ),
('NELSON','11-Sep-85','11-Oct-89','M','COBOL','DBASE',2500 ),
('PATTRICK','10-Nov-65','21-Apr-90','M','PASCAL','CLIPPER',2800 ),
( 'QADIR','31-Aug-65','21-Apr-91','M','ASSEMBLY','C',3000 ),
('RAMESH','03-May-67','28-Feb-91','M','PASCAL','DBASE',3200 ),
('REBECCA','01-Jan-67','01-Dec-90','F','BASIC','COBOL',2500 ),
('REMITHA','19-Apr-70','20-Apr-93','F','C','ASSEMBLY',3600 ),
('REVATHI','02-Dec-69','02-Jan-92','F','PASCAL','BASIC',3700 ),
('VIJAYA','14-Dec-65','02-May-92','F','FOXPRO','C',3500);

SELECT * FROM studies
SELECT * FROM software
SELECT * FROM programmer

--1.Find out the selling cost AVG for packages developed in Pascal. 
SELECT * FROM software;
SELECT AVG(SCOST) AS Avg_sellingcost FROM software WHERE DEVELOPIN = 'PASCAL';

--2. Display Names, Ages of all Programmers. 
SELECT * FROM programmer;
SELECT PNAME AS NAME, DATEDIFF(YY,DOB,GETDATE()) AS AGE FROM programmer;

--3. Display the Names of those who have done the DAP Course.
SELECT * FROM studies;
SELECT PNAME, COURSE AS C_NAME FROM studies WHERE COURSE = 'DAP';

--4. Display the Names and Date of Births of all Programmers Born in January
SELECT * FROM programmer;
SELECT PNAME, DOB FROM programmer WHERE MONTH(DOB)=1;

--5. What is the Highest Number of copies sold by a Package? 
SELECT * FROM software;
SELECT MAX(SOLD) AS MAX_SOLD FROM software;

--6. Display lowest course Fee.
SELECT * FROM studies;
SELECT MIN(COURSE_FEE) AS MIN_COURSE_FEE FROM studies;

--7. How many programmers done the PGDCA Course?
SELECT * FROM studies;
SELECT COUNT(*) AS COUNT_PROGR FROM studies WHERE COURSE='PGDCA';

--8. How much revenue has been earned through sales of Packages Developed in C.
SELECT * FROM software;
SELECT SUM(SCOST*SOLD) AS REVENUE FROM software WHERE DEVELOPIN='C';

--9. Display the Details of the Software Developed by Ramesh. 
SELECT * FROM software;
SELECT * FROM software WHERE PNAME='RAMESH';

--10. How many Programmers Studied at Sabhari? 
SELECT * FROM studies;
SELECT COUNT(*) PROG_COUNT FROM studies WHERE INSTITUTE='SABHARI';

--11. Display details of Packages whose sales crossed the 2000 Mark.
SELECT * FROM software;
SELECT TITLE, SUM(SCOST*SOLD) AS REVENUE FROM software
GROUP BY TITLE HAVING SUM(SCOST*SOLD)>2000;

--12. Display the Details of Packages for which Development Cost have been recovered.
SELECT * FROM software;
SELECT * FROM software WHERE (SCOST*SOLD)>DCOST;

--13. What is the cost of the costliest software development in Basic? 
SELECT * FROM software;
SELECT TITLE,MAX(SCOST) FROM software WHERE DEVELOPIN='BASIC' GROUP BY TITLE;

--14. How many Packages Developed in DBASE? 
SELECT * FROM software;
SELECT COUNT(*) DEVELOPIN FROM software WHERE DEVELOPIN='DBASE';

--15. How many programmers studied in Pragathi? 
SELECT * FROM studies;
SELECT COUNT(PNAME) AS PROGRAMERS FROM studies WHERE INSTITUTE='PRAGATHI';

--16. How many Programmers Paid 5000 to 10000 for their course
SELECT * FROM studies;
SELECT COUNT(COURSE_FEE) AS PROGRAMERS FROM studies WHERE COURSE_FEE BETWEEN 5000 AND 10000;

--17. What is AVG Course Fee 
SELECT * FROM studies;
SELECT AVG(COURSE_FEE) AS AVG_FEE FROM studies;

--18. Display the details of the Programmers Knowing C.
SELECT * FROM programmer;
SELECT * FROM programmer WHERE PROF1='C' OR PROF2='C';

--19. How many Programmers know either COBOL or PASCAL. 
SELECT * FROM programmer;
SELECT COUNT(PNAME) AS MEMBERS FROM programmer WHERE PROF1 IN ('COBOL', 'PASCAL') OR PROF2 IN ('COBOL', 'PASCAL');

--20. How many Programmers Don’t know PASCAL and C 
SELECT * FROM programmer;
SELECT COUNT(PNAME) AS PROGRAMERS FROM programmer WHERE PROF1 NOT IN ('C', 'PASCAL') AND PROF2 NOT IN ('C', 'PASCAL');

-- 21. How old is the Oldest Male Programmer. 
SELECT * FROM programmer;
SELECT MAX(DATEDIFF(YY,DOB,GETDATE())) AS AGE FROM programmer WHERE GENDER='M';

-- 22. What is the AVG age of Female Programmers? 
SELECT * FROM programmer;
SELECT AVG(DATEDIFF(YY, DOB, GETDATE())) AS AVG_AGE FROM programmer WHERE GENDER='F';

-- 23. Calculate the Experience in Years for each Programmer and Display with their names in Descending order. 
SELECT * FROM programmer;
SELECT PNAME, DATEDIFF(YY,DOJ,GETDATE()) AS EXPER FROM programmer ORDER BY PNAME DESC;

--24. Who are the Programmers who celebrate their Birthday’s During the Current Month?
SELECT * FROM programmer;
SELECT PNAME, DOB FROM programmer WHERE MONTH(DOB)=MONTH(GETDATE());

-- 25. How many Female Programmers are there? 
SELECT * FROM programmer;
SELECT COUNT(GENDER) AS FEMALE FROM programmer WHERE GENDER='F';

-- 26. What are the Languages studied by Male Programmers.
SELECT * FROM programmer;
SELECT PNAME,PROF1,PROF2 FROM programmer WHERE GENDER='M';

--OR

SELECT DISTINCT PROF1 AS LANG FROM programmer WHERE GENDER='M'
UNION
SELECT DISTINCT PROF2 AS LANG FROM programmer WHERE GENDER='M';

--27. What is the AVG Salary? 
SELECT * FROM programmer;
SELECT AVG(SALARY) AS AVG_SAL FROM programmer;

--28. How many people draw salary 2000 to 4000?
SELECT * FROM programmer
SELECT COUNT(SALARY) AS COUNTPEOP FROM programmer WHERE SALARY BETWEEN 2000 AND 4000

-- 29. Display the details of those who don’t know Clipper, COBOL or PASCAL. 
SELECT * FROM programmer;
SELECT * FROM programmer WHERE PROF1 NOT IN ('CLIPPER','COBOL','PASCAL') AND PROF2 NOT IN ('CLIPPER','COBOL','PASCAL');

--30. Display the Cost of Package Developed By each Programmer. 
SELECT * FROM software;
SELECT PNAME, SUM(DCOST) AS TOTALPACKCOST FROM software GROUP BY PNAME;

--31. Display the sales values of the Packages Developed by the each Programmer. 
SELECT * FROM software;
SELECT PNAME, SUM(SCOST*SOLD) AS SALESVALUE FROM software GROUP BY PNAME;

--32. Display the Number of Packages sold by Each Programmer. 
SELECT * FROM software;
SELECT PNAME, SUM(SOLD) AS NUMBER FROM software GROUP BY PNAME;

--33. Display the sales cost of the packages Developed by each Programmer Language wise.
SELECT * FROM software;
SELECT DEVELOPIN, SUM(SCOST) AS PACKCOST FROM software GROUP BY DEVELOPIN;

--34. Display each language name with AVG Development Cost, AVG Selling Cost and AVG Price per Copy. 
SELECT * FROM software;
SELECT DEVELOPIN, AVG(DCOST) AS AVG_DEVCOST, AVG(SCOST) AS AVG_SCOST, AVG(DCOST%SCOST) AS AVG_PER FROM software GROUP BY DEVELOPIN;
--OR
SELECT DEVELOPIN, AVG(DCOST) AS AVG_DEVCOST, AVG(SCOST) AS AVG_SCOST,IIF(SUM(SOLD)<>0,sum(SCOST)/sum(SOLD),0) AS AvgPrCopy
FROM software GROUP BY DEVELOPIN;

--35. Display each programmer’s name, costliest and cheapest Packages Developed by him or her.
SELECT * FROM software;
SELECT PNAME, MAX(DCOST) AS MAX_COST, MIN(DCOST) AS MIN_COST FROM software GROUP BY PNAME;

--36. Display each institute name with number of Courses, Average Cost per Course.
SELECT * FROM studies;
SELECT INSTITUTE, (COUNT(DISTINCT COURSE)) AS NUM_COURSE, AVG(COURSE_FEE) AS AVG_FEE FROM studies GROUP BY INSTITUTE;

--37. Display each institute Name with Number of Students.
SELECT * FROM studies;
SELECT INSTITUTE, COUNT(PNAME) AS NUM_STUD FROM studies GROUP BY INSTITUTE;

--38. Display Names of Male and Female Programmers. Gender also. 
SELECT * FROM programmer;
SELECT PNAME, GENDER FROM programmer ORDER BY GENDER;

--39. Display the Name of Programmers and Their Packages. 
SELECT * FROM software;
SELECT PNAME, TITLE FROM software GROUP BY PNAME, TITLE;

--40. Display the Number of Packages in Each Language Except C and C++. 
SELECT * FROM software;
SELECT DEVELOPIN, COUNT(TITLE) AS NUMBER FROM software WHERE DEVELOPIN NOT IN ('C','C++') GROUP BY DEVELOPIN;

--41. Display the Number of Packages in Each Language for which Development Cost is less than 1000
SELECT * FROM software;
SELECT DEVELOPIN, COUNT(TITLE) AS NUMBER FROM software WHERE DCOST < 1000 GROUP BY DEVELOPIN;

--42. Display AVG Difference between SCOST, DCOST for Each Package. 
SELECT * FROM software;
SELECT TITLE, AVG(DCOST) AS AVGDCOST, AVG(SCOST) AS AVGSCOST, AVG(DCOST)-AVG(SCOST) AS AVGDIFF FROM software GROUP BY TITLE;

--43. Display the total SCOST, DCOST and amount to be recovered for each Programmer for those whose cost has not yet been recovered.
SELECT * FROM software;
SELECT PNAME, SUM(DCOST) AS TOT_DCOST, SUM(SCOST*SOLD) AS TOT_SCOST, SUM(DCOST-(SCOST*SOLD)) AS AMOUNT FROM software
GROUP BY PNAME HAVING SUM(DCOST)>SUM(SCOST*SOLD);

--44. Display Highest, Lowest and Average Salaries for those earning more than 2000. 
SELECT * FROM programmer;
SELECT MAX(SALARY) AS HIGH_SAL, MIN(SALARY) AS MIN_SAL, AVG(SALARY) AS AVG_SAL FROM programmer WHERE SALARY >2000;

--45. Who is the Highest Paid C Programmers?
SELECT * FROM programmer;
SELECT * FROM programmer WHERE SALARY=(SELECT MAX(SALARY) AS HIGH_SAL FROM programmer WHERE PROF1 LIKE 'C' OR PROF2 LIKE 'C');
--OR
SELECT TOP 1 * FROM programmer WHERE 'C' IN (PROF1,PROF2) ORDER BY SALARY DESC;

--46. Who is the Highest Paid Female COBOL Programmer? 
SELECT * FROM programmer;
SELECT * FROM programmer WHERE GENDER='F' AND
SALARY=(SELECT MAX(SALARY) AS HIGH_SAL FROM programmer WHERE PROF1 LIKE 'COBOL' OR PROF2 LIKE 'COBOL');
--OR
SELECT TOP 1 * FROM programmer WHERE 'COBOL' IN (PROF1,PROF2) AND GENDER='F' ORDER BY SALARY DESC;

--47. Display the names of the highest paid programmers for each Language. 
SELECT * FROM programmer;

CREATE TABLE #LangSal (PROF varchar(20), SAL int);
INSERT INTO #LangSal 
SELECT PROF1, MAX(SALARY) AS HighestPay FROM programmer GROUP BY PROF1;

INSERT INTO #LangSal 
SELECT PROF2, MAX(SALARY) AS HighestPay FROM programmer GROUP BY PROF2;

CREATE TABLE #LangSalMax(PROF varchar(20), SAL int);
INSERT INTO #LangSalMax
SELECT PROF, MAX(SAL) FROM #LangSal GROUP BY PROF;

SELECT PNAME,PROF,SAL FROM programmer INNER JOIN #LangSalMax ON PROF=PROF1 OR PROF=PROF2
WHERE SAL=SALARY ORDER BY PROF;


--48. Who is the least experienced Programmer. 
SELECT * FROM programmer;
SELECT TOP(1) PNAME, DATEDIFF(YY,DOJ,GETDATE()) AS EXPER FROM programmer ORDER BY DOJ DESC;
--OR
SELECT PNAME, DATEDIFF(YY,DOJ,GETDATE()) AS EXPPER FROM programmer
WHERE DATEDIFF(YY,DOJ,GETDATE()) = (SELECT MIN(DATEDIFF(YY,DOJ,GETDATE()))FROM programmer);

--49. Who is the most experienced male programmer knowing PASCAL. 
SELECT * FROM programmer;
SELECT TOP(1) PNAME, DOJ, DATEDIFF(YY,DOJ,GETDATE()) AS EXPER FROM programmer
WHERE GENDER='M' AND PROF1='PASCAL' OR PROF2='PASCAL' ORDER BY DOJ;
--OR
SELECT DISTINCT PNAME, DATEDIFF(YY,DOJ,GETDATE()) AS EXPRNCE FROM programmer
WHERE DATEDIFF(DD,DOJ,GETDATE()) = (SELECT MAX(DATEDIFF(DD,DOJ,GETDATE())) FROM programmer
WHERE GENDER='M' AND PROF1='PASCAL' OR PROF2='PASCAL');

--50. Which language is known by only one Programmer?
SELECT * FROM programmer;
SELECT PROF1 FROM PROGRAMMER GROUP BY PROF1 HAVING PROF1 NOT IN
(SELECT PROF2 FROM PROGRAMMER) AND COUNT(PROF1)=1 
UNION SELECT PROF2 FROM PROGRAMMER GROUP BY PROF2 HAVING PROF2 NOT IN (SELECT PROF1 FROM PROGRAMMER) AND COUNT(PROF2)=1;

--51. Who is the Above Programmer referred in 50? 
SELECT * FROM programmer;
SELECT PNAME FROM programmer WHERE PNAME=((SELECT PROF1 FROM PROGRAMMER GROUP BY PROF1 HAVING PROF1 NOT IN
(SELECT PROF2 FROM PROGRAMMER) AND COUNT(PROF1)=1 
UNION SELECT PROF2 FROM PROGRAMMER GROUP BY PROF2 HAVING PROF2 NOT IN (SELECT PROF1 FROM PROGRAMMER) AND COUNT(PROF2)=1);

CREATE TABLE #Lang(PROF VARCHAR(20));
INSERT INTO #Lang 
SELECT PROF1 FROM programmer GROUP BY PROF1 HAVING PROF1 NOT IN (SELECT PROF2 FROM programmer) AND COUNT(PROF1)=1
UNION
SELECT PROF2 FROM programmer GROUP BY PROF2 HAVING PROF2 NOT IN (SELECT PROF1 FROM programmer) AND COUNT(PROF2)=1

SELECT PNAME, PROF FROM programmer INNER JOIN #Lang ON PROF=PROF1 OR PROF=PROF2;

--52. Who is the Youngest Programmer knowing DBASE?
SELECT * FROM programmer;
SELECT TOP(1) PNAME, DOB, DATEDIFF(YY,DOB,GETDATE()) AS YOUNG FROM programmer WHERE PROF1='DBASE' OR PROF2='DBASE' ORDER BY DOB DESC;

--OR
SELECT PNAME, DOB FROM programmer WHERE DATEDIFF(DD,DOB,GETDATE()) =
(SELECT MIN(DATEDIFF(DD,DOB,GETDATE())) FROM programmer WHERE 'DBASE' IN (PROF1,PROF2));

--53. Which Female Programmer earning more than 3000 does not know C, C++, ORACLE or DBASE?
SELECT * FROM programmer;
SELECT * FROM programmer WHERE GENDER='F' AND SALARY>3000 AND PROF1 NOT IN ('C','C++','ORACLE','DBASE') AND 
PROF2 NOT IN ('C','C++','ORACLE','DBASE');

--54. Which Institute has most number of Students? 
SELECT * FROM studies;
SELECT TOP(1) COUNT(PNAME) AS NUM, INSTITUTE FROM studies GROUP BY INSTITUTE ORDER BY NUM DESC;
--OR

CREATE TABLE #InstStudNo (InsNam VARCHAR(20), StdNo INT)
INSERT INTO #InstStudNo SELECT INSTITUTE,COUNT(PNAME) FROM studies GROUP BY INSTITUTE

SELECT InsNam,StdNo AS COUNT_OF_STUDENTS FROM #InstStudNo WHERE StdNo = (SELECT MAX(StdNo) FROM #InstStudNo);

--55. What is the Costliest course?
SELECT * FROM studies;
SELECT INSTITUTE, COURSE, COURSE_FEE FROM studies WHERE COURSE_FEE=(SELECT MAX(COURSE_FEE) FROM studies) ;

--56. Which course has been done by the most of the Students? 
SELECT * FROM studies;
SELECT TOP(1) COUNT(PNAME) AS NUM, COURSE FROM studies GROUP BY COURSE ORDER BY NUM DESC;
--OR
CREATE TABLE #CourStudNo (CourNam VARCHAR(20), StdNo INT)
INSERT INTO #CourStudNo
SELECT COURSE,COUNT(PNAME) FROM studies GROUP BY COURSE
SELECT CourNam,StdNo AS COUNT_OF_STUDENTS FROM #CourStudNo WHERE StdNo = 
(SELECT MAX(StdNo) FROM #CourStudNo);

--57. Which Institute conducts costliest course. 
SELECT * FROM studies;
SELECT INSTITUTE, COURSE, COURSE_FEE FROM studies WHERE COURSE_FEE=(SELECT MAX(COURSE_FEE) FROM studies) ;

--58. Display the name of the Institute and Course, which has below AVG course fee. 
SELECT * FROM studies;
SELECT INSTITUTE, COURSE, COURSE_FEE FROM studies WHERE COURSE_FEE<(SELECT AVG(COURSE_FEE) FROM studies) ;

--59. Display the names of the courses whose fees are within 1000 (+ or -) of the Average Fee, 
SELECT * FROM studies;
SELECT INSTITUTE, COURSE, COURSE_FEE FROM studies WHERE COURSE_FEE<(SELECT AVG(COURSE_FEE)+1000 FROM studies) 
AND COURSE_FEE>(SELECT AVG(COURSE_FEE)-1000 FROM studies);

--60. Which package has the Highest Development cost? 
SELECT * FROM software;
SELECT TITLE, DEVELOPIN, DCOST FROM software WHERE DCOST=(SELECT MAX(DCOST) AS MAXCOST FROM software);

--61. Which course has below AVG number of Students? 
SELECT * FROM studies;

CREATE TABLE #AVGCNT (CRS VARCHAR(20), CNT INT)
INSERT INTO #AVGCNT
SELECT COURSE, COUNT(PNAME) FROM studies GROUP BY COURSE
SELECT CRS,CNT FROM #AVGCNT WHERE CNT <=(SELECT AVG(CNT) FROM #AVGCNT);

--62. Which Package has the lowest selling cost? 
SELECT * FROM software;
SELECT DISTINCT(TITLE), DEVELOPIN, SCOST FROM software WHERE SCOST=(SELECT MIN(SCOST) FROM software);

--63. Who Developed the Package that has sold the least number of copies? 
SELECT * FROM software;
SELECT PNAME,TITLE, SOLD FROM software WHERE SOLD = (SELECT MIN(SOLD) FROM software);

--64. Which language has used to develop the package, which has the highest sales amount? 
SELECT * FROM software;
SELECT TITLE,DEVELOPIN, SCOST FROM software WHERE SCOST= (SELECT MAX(SCOST) FROM software);

--65. How many copies of package that has the least difference between development and selling cost where sold. 
SELECT * FROM software;
SELECT TITLE,SOLD, DCOST-SCOST AS DIFFCOST FROM software WHERE (DCOST-SCOST)=(SELECT MIN(DCOST-SCOST) FROM software);

--66. Which is the costliest package developed in PASCAL. 
SELECT * FROM software;
SELECT TITLE, DCOST, DEVELOPIN FROM software WHERE DCOST=(SELECT MAX(DCOST) FROM software WHERE DEVELOPIN='PASCAL');

--67. Which language was used to develop the most number of Packages. 
SELECT * FROM software;

CREATE TABLE #DEVCNT (LANG VARCHAR(20), CNT INT)
INSERT INTO #DEVCNT
SELECT DEVELOPIN, COUNT(TITLE) FROM software GROUP BY DEVELOPIN
SELECT LANG, CNT FROM #DEVCNT WHERE CNT=(SELECT MAX(CNT) FROM #DEVCNT);

--68. Which programmer has developed the highest number of Packages
SELECT * FROM software;
SELECT TOP(1) PNAME, COUNT(TITLE) AS NUM FROM software GROUP BY PNAME ORDER BY NUM DESC;

--69. Who is the Author of the Costliest Package? 
SELECT * FROM software;
SELECT PNAME, DCOST FROM software WHERE DCOST=(SELECT MAX(DCOST) FROM software);

--70. Display the names of the packages, which have sold less than the AVG number of copies.
SELECT * FROM software;
SELECT TITLE, SOLD FROM software WHERE SOLD<(SELECT AVG(SOLD) FROM software);

--71. Who are the authors of the Packages, which have recovered more than double the Development cost? 
SELECT * FROM software;
SELECT PNAME,TITLE FROM software WHERE (SOLD*SCOST) > 2*DCOST;

--72. Display the programmer Name and the cheapest packages developed by them in each language. 
SELECT * FROM software;
SELECT PNAME,TITLE, DEVELOPIN, DCOST FROM software WHERE DCOST IN (SELECT MIN(DCOST) FROM software GROUP BY DEVELOPIN);

--73. Display the language used by each programmer to develop the Highest Selling and Lowest-selling package. 
SELECT * FROM software;
SELECT PNAME, DEVELOPIN FROM software WHERE SOLD IN (SELECT MAX(SOLD) FROM software)
UNION 
SELECT PNAME, DEVELOPIN FROM software WHERE SOLD IN (SELECT MIN(SOLD) FROM software);

--74. Who is the youngest male Programmer born in 1965? 
SELECT * FROM programmer;
SELECT TOP(1) PNAME, DOB FROM programmer WHERE YEAR(DOB)='1965' AND GENDER='M' ORDER BY DOB DESC;
--OR
SELECT TOP(1) PNAME, DOB, DATEDIFF(DD,DOB,GETDATE()) AS AGE FROM programmer WHERE YEAR(DOB)='1965' AND GENDER='M' ORDER BY AGE;
--OR
SELECT PNAME, DOB FROM programmer WHERE DATEDIFF(DD,DOB,GETDATE())=
(SELECT MIN(DATEDIFF(DD,DOB,GETDATE())) FROM programmer WHERE  year(DOB)=1965 AND GENDER='M');

--75. Who is the oldest Female Programmer who joined in 1992
SELECT * FROM programmer;
SELECT PNAME, DOJ, DOB FROM PROGRAMMER WHERE DOB=(SELECT (MIN(DOB)) FROM PROGRAMMER WHERE YEAR(DOJ) LIKE '1992');
--OR
SELECT TOP(1) PNAME, DATEDIFF(YY,DOB,GETDATE()) AS AGE FROM programmer WHERE YEAR(DOJ)='1992' AND GENDER='F' ORDER BY AGE DESC;
--OR
SELECT PNAME,DOB,YEAR(DOJ) FROM Programmer WHERE DATEDIFF(DD,DOB,GETDATE())=
(SELECT MAX(DATEDIFF(DD,DOB,GETDATE())) FROM Programmer WHERE YEAR(DOJ) ='1992');

--76. In which year was the most number of Programmers born. 
SELECT * FROM programmer;

CREATE TABLE #TEMP (YOB INT, CNT INT);
INSERT INTO #TEMP
SELECT YEAR(DOB),COUNT(YEAR(DOB)) FROM programmer GROUP BY YEAR(DOB);
SELECT YOB, CNT FROM #TEMP WHERE CNT= (SELECT MAX(CNT) FROM #TEMP);

--77. In which month did most number of programmers join? 
SELECT * FROM programmer;

CREATE TABLE #MOJ (MOJ INT, CNT INT);
INSERT INTO #MOJ
SELECT MONTH(DOJ),COUNT(MONTH(DOJ)) FROM programmer GROUP BY MONTH(DOJ)
SELECT MOJ, CNT FROM #MOJ WHERE CNT= (SELECT MAX(CNT) FROM #MOJ);

--78. In which language are most of the programmer’s proficient. 
SELECT * FROM programmer;

CREATE TABLE #PCNT (PR VARCHAR(20), CNT INT);
CREATE TABLE #PsCNT (PRs VARCHAR(20), sCNT INT);

INSERT INTO #PCNT
SELECT PROF1, COUNT(PROF1) FROM programmer GROUP BY PROF1 UNION ALL
SELECT PROF2, COUNT(PROF2) FROM programmer GROUP BY PROF2;

INSERT INTO #PsCNT
SELECT PR, SUM(CNT) FROM #PCNT GROUP BY PR;

SELECT PRs, sCNT FROM #PsCNT WHERE sCNT = (SELECT MAX(sCNT) FROM #PsCNT);

--79. Who are the male programmers earning below the AVG salary of Female Programmers? 
SELECT * FROM programmer;
SELECT PNAME, SALARY FROM programmer WHERE GENDER='M' AND SALARY < (SELECT(AVG(SALARY))FROM programmer WHERE GENDER= 'F');

--80. Who are the Female Programmers earning more than the Highest Paid male? 
SELECT * FROM programmer;
SELECT PNAME, SALARY FROM programmer WHERE GENDER='F' AND SALARY >(SELECT(MAX(SALARY))FROM programmer WHERE GENDER='M');

--81. Which language has been stated as the proficiency by most of the Programmers
SELECT * FROM programmer;

CREATE TABLE #PLCNT (PR VARCHAR(20), CNT INT);
CREATE TABLE #PLsCNT (PRs VARCHAR(20), sCNT INT);

INSERT INTO #PLCNT
SELECT PROF1, COUNT(PROF1) FROM programmer GROUP BY PROF1 UNION ALL
SELECT PROF2, COUNT(PROF2) FROM programmer GROUP BY PROF2;

INSERT INTO #PLsCNT
SELECT PR, SUM(CNT) FROM #PCNT GROUP BY PR;

SELECT PRs, sCNT FROM #PLsCNT WHERE sCNT = (SELECT MAX(sCNT) FROM #PLsCNT);

--82. Display the details of those who are drawing the same salary. 
SELECT * FROM programmer;
SELECT A.PNAME, A.SALARY FROM Programmer A INNER JOIN PROGRAMMER B ON A.SALARY= B.SALARY AND A.PNAME<>B.PNAME
ORDER BY A.SALARY;

--83. Display the details of the Software Developed by the Male Programmers Earning more than 3000/-. 
SELECT * FROM programmer;
SELECT * FROM software;
SELECT s.* FROM software s JOIN programmer p ON p.PNAME=s.PNAME WHERE GENDER='M' AND SALARY>3000;

--84. Display the details of the packages developed in Pascal by the Female Programmers. 
SELECT * FROM programmer;
SELECT * FROM software;
SELECT s.* FROM software s JOIN programmer p ON p.PNAME=s.PNAME WHERE GENDER='F' AND DEVELOPIN='PASCAL';

--85. Display the details of the Programmers who joined before 1990.
SELECT * FROM programmer;
SELECT * FROM programmer WHERE YEAR(DOJ)<'1990';

--86. Display the details of the Software Developed in C By female programmers of Pragathi. 
SELECT * FROM programmer;
SELECT * FROM studies;
SELECT * FROM software;
SELECT SW.* FROM software SW, programmer P, studies ST WHERE SW.PNAME=P.PNAME AND SW.PNAME=ST.PNAME 
AND GENDER='F' AND DEVELOPIN='C' AND INSTITUTE='PRAGATHI' ;

--87. Display the number of packages, No. of Copies Sold and sales value of each programmer institute wise. 
SELECT * FROM studies;
SELECT * FROM software;
SELECT INSTITUTE, COUNT(sw.SOLD) AS NUMPACK, SUM(SCOST*SOLD) AS SALEVALUE FROM software sw, studies st 
WHERE sw.PNAME=st.PNAME GROUP BY INSTITUTE;

--88. Display the details of the software developed in DBASE by Male Programmers, who belong to the institute 
               --in which most number of Programmers studied. 
SELECT * FROM studies;
SELECT * FROM software;
SELECT * FROM programmer;

CREATE TABLE #INST (INS VARCHAR(20), CNT INT);
INSERT INTO #INST
SELECT INSTITUTE, COUNT(PNAME) FROM studies GROUP BY INSTITUTE;
SELECT DISTINCT SW.* FROM software SW, programmer PG, studies ST, #INST
WHERE DEVELOPIN='DBASE' AND GENDER='M' AND SW.PNAME = PG.PNAME AND INSTITUTE = INS AND CNT= (SELECT MAX(CNT) FROM #INST);

--89. Display the details of the software Developed by the male programmers Born before 1965 and female programmers born after 1975.
SELECT * FROM software;
SELECT * FROM programmer;
SELECT s.* FROM software s, programmer p WHERE s.PNAME=p.PNAME 
AND (GENDER='M' and YEAR(DOB)<'1965' OR GENDER='F' AND YEAR(DOB)>'1975');

--90. Display the details of the software that has developed in the language which is neither the first nor the second proficiency of the programmers.
SELECT * FROM programmer;
SELECT * FROM software;
SELECT s.* FROM programmer p,software s WHERE s.PNAME=p.PNAME AND (DEVELOPIN<> PROF1 AND DEVELOPIN<> PROF2);

--91. Display the details of the software developed by the male students of Sabhari?
SELECT * FROM studies;
SELECT * FROM software;
SELECT * FROM programmer;
SELECT SW.* FROM software SW, studies ST, programmer P WHERE SW.PNAME=ST.PNAME AND ST.PNAME=P.PNAME AND GENDER='M' AND INSTITUTE='SABHARI';

--92. Display the names of the programmers who have not developed any packages. 
SELECT * FROM programmer;
SELECT * FROM software;
SELECT PNAME FROM programmer WHERE PNAME NOT IN (SELECT PNAME FROM software);

--93. What is the total cost of the Software developed by the programmers of Apple? 
SELECT * FROM software;
SELECT * FROM studies;
SELECT SUM(SCOST) AS TOTAL FROM software SW, studies ST WHERE SW.PNAME=ST.PNAME AND INSTITUTE='APPLE';

--94. Who are the programmers who joined on the same day?
SELECT * FROM programmer;
SELECT P.PNAME, P.DOJ FROM programmer P, programmer P2  WHERE P.DOJ=P2.DOJ AND P.PNAME<>P2.PNAME ORDER BY DOJ;

-- 95. Who are the programmers who have the same Prof2? 
SELECT * FROM programmer;
SELECT PNAME, PROF2 FROM programmer WHERE PROF2=ANY(SELECT PROF2 FROM programmer GROUP BY PROF2 HAVING COUNT(*)>1) ORDER BY PROF2;
--OR
SELECT DISTINCT A.PNAME, A.PROF2 FROM programmer A INNER JOIN programmer B ON A.PROF2=B.PROF2 
WHERE A.PNAME<>B.PNAME ORDER BY A.PROF2;

--96. Display the total sales value of the software, institute wise. 
SELECT * FROM studies;
SELECT * FROM software;
SELECT st.INSTITUTE, SUM(sw.SOLD*sw.SCOST) AS TSALESVAL FROM software sw, studies st WHERE st.PNAME=sw.PNAME GROUP BY st.INSTITUTE;

--97. In which institute does the person who developed the costliest package studied. 
SELECT * FROM studies;
SELECT * FROM software;
SELECT INSTITUTE, sw.PNAME, DCOST FROM software sw, studies st WHERE sw.PNAME=st.PNAME AND 
DCOST=(SELECT MAX(DCOST) FROM software sw);

--98. Which language listed in prof1, prof2 has not been used to develop any package. 
SELECT * FROM programmer;
SELECT * FROM software;
SELECT PROF1 FROM programmer WHERE PROF1 NOT IN (SELECT DEVELOPIN FROM software)
UNION
SELECT PROF2 FROM programmer WHERE PROF2 NOT IN (SELECT DEVELOPIN FROM software);

--99. How much does the person who developed the highest selling package earn and what course did HE/SHE undergo.
SELECT * FROM programmer;
SELECT * FROM software;
SELECT * FROM studies;
SELECT p.PNAME, p.SALARY, st.COURSE FROM programmer p, software sw, studies st
WHERE p.PNAME=sw.PNAME AND sw.PNAME=st.PNAME and SCOST=(SELECT MAX(SCOST) FROM software);

--100. What is the AVG salary for those whose software sales is more than 50,000/-. 
SELECT * FROM programmer;
SELECT * FROM software;
SELECT AVG(SALARY) AS AVGSAL FROM programmer P, software S WHERE P.PNAME=S.PNAME AND (SCOST*SOLD)>50000;

--101. How many packages were developed by students, who studied in institute that charge the lowest course fee? 
SELECT * FROM studies;
SELECT * FROM software;
SELECT sw.PNAME, COUNT(sw.PNAME) AS PACKAGES FROM software sw, studies st WHERE sw.PNAME=st.PNAME GROUP BY sw.PNAME, COURSE_FEE 
HAVING MIN(COURSE_FEE)=(SELECT MIN(COURSE_FEE) FROM studies);

--102. How many packages were developed by the person who developed the cheapest package, where did HE/SHE study?
SELECT * FROM programmer;
SELECT * FROM software;
SELECT * FROM studies;
SELECT st.INSTITUTE, COUNT(sw.PNAME) FROM programmer p,software sw, studies st WHERE sw.PNAME=p.PNAME AND p.PNAME=st.PNAME
GROUP BY sw.PNAME, st.INSTITUTE HAVING MIN(DCOST)=(SELECT MIN(DCOST) FROM software);

--103. How many packages were developed by the female programmers earning more than the highest paid male programmer? 
SELECT * FROM programmer;
SELECT * FROM software;
SELECT COUNT(DEVELOPIN) AS NUMBER FROM software sw, programmer p WHERE sw.PNAME=p.PNAME AND GENDER='F' AND SALARY >
(SELECT MAX(SALARY) FROM programmer p, software sw WHERE sw.PNAME=p.PNAME AND GENDER='M');

--104. How many packages are developed by the most experienced programmer form BDPS.
SELECT * FROM programmer;
SELECT * FROM software;
SELECT * FROM studies;
SELECT COUNT(sw.TITLE) FROM software sw, programmer p, studies st WHERE sw.PNAME=p.PNAME AND p.PNAME=st.PNAME AND st.INSTITUTE='BDPS'
AND p.PNAME=(SELECT DATEDIFF(YY,DOJ,GETDATE()) FROM programmer);
--OR
SELECT COUNT(TITLE) FROM software WHERE PNAME = 
(
	SELECT PG.PNAME, DOJ FROM programmer AS PG 
	WHERE DATEDIFF(DD,DOJ,GETDATE())= 
		(SELECT MAX(DATEDIFF(DD,DOJ,GETDATE())) 
		FROM programmer AS PG, studies AS ST
		WHERE PG.PNAME=ST.PNAME AND PG.PNAME IN (SELECT PNAME FROM studies WHERE INSTITUTE='BDPS'))
		AND PG.PNAME IN (SELECT PNAME FROM studies WHERE INSTITUTE='BDPS')
)

-- 105. List the programmers (form the software table) and the institutes they studied. 
SELECT * FROM studies;
SELECT * FROM software;
SELECT PNAME, INSTITUTE FROM studies WHERE PNAME NOT IN (SELECT PNAME FROM software);

--106. List each PROF with the number of Programmers having that PROF and the number of the packages in that PROF. 
SELECT * FROM software;
SELECT * FROM programmer;
SELECT DEVELOPIN,SUM(SCOST*SOLD-DCOST) AS PROFIT, COUNT(1) AS PROG_CNT from software 
WHERE DEVELOPIN IN ((SELECT PROF1 FROM programmer) UNION ALL (SELECT PROF2 FROM programmer))
GROUP BY DEVELOPIN;

--107. List the programmer names (from the programmer table) and No. Of Packages each has developed.
SELECT * FROM programmer;
SELECT * FROM software;
SELECT sw.PNAME, COUNT(DEVELOPIN) AS NUMPACK FROM programmer p, software sw WHERE p.PNAME=sw.PNAME GROUP BY sw.PNAME;















